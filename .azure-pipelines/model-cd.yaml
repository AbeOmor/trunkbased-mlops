trigger:
  branches:
    include:
    - main
  paths:
    include:
    - jobs/**
    - src/**
    exclude:
    - src/*/score/**

pool:
  vmImage: ubuntu-latest

variables:
  - template: variables.group.yaml

stages:
- stage: aml_model_integrate
  displayName: Model - Build
  jobs:
  - job: train
    displayName: Model training
    steps:
      - template: templates/aml-cli-install/step.yaml
        parameters:
          componentSupport: false
          minVersion: 2.0
      - template: templates/aml-env-ensure/step.yaml
        parameters:
          azureServiceConnectionName: $(SERVICECONNECTION)
          envFile: environments/${{ variables.condaEnvName }}/environment.yml
          validateOnly: true
          workspaceName: $(WORKSPACENAME)
          resourceGroup: $(RESOURCEGROUPNAME)
      - template: templates/aml-job-create/step.yaml
        parameters:
          azureServiceConnectionName: $(SERVICECONNECTION)
          name: ${{ variables.modelName }}
          jobFile: jobs/hatedetection/train.job.yml
          workspaceName: $(WORKSPACENAME)
          resourceGroup: $(RESOURCEGROUPNAME)
          noWait: false

- stage: aml_model_registration
  displayName: Model - Source control
  jobs:
  - deployment: model_registration
    displayName: Model registration
    environment: amlworkspace_$(env)
    variables:
      jobName: $[ stageDependencies.aml_model_integrate.train.outputs['jobRun.jobName'] ]
    strategy: 
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: templates/aml-cli-install/step.yaml
              parameters:
                componentSupport: false
                minVersion: 2.0
            - template: templates/aml-model-register/step.yaml
              parameters:
                azureServiceConnectionName: $(SERVICECONNECTION)
                name: ${{ variables.modelName }}
                fromJob: true
                jobName: $(jobName)
                description: $(description)
                modelPath: outputs/hate-pt-speech.zip
                modelVersion: latest
                workspaceName: $(WORKSPACENAME)
                resourceGroup: $(RESOURCEGROUPNAME)
                workspaceConfig: workspaces/$(env)/workspace.json

- stage: aml_model_evaluate
  displayName: Model - Evaluation
  jobs:
  - job: evaluate
    displayName: Model evaluation
    steps:
      - template: templates/aml-cli-install/step.yaml
        parameters:
          componentSupport: false
          minVersion: 2.0
      - template: templates/aml-job-create/step.yaml
        parameters:
          azureServiceConnectionName: $(SERVICECONNECTION)
          stepDisplayName: Computing McNemar statistic
          name: ${{ variables.modelName }}-eval
          jobFile: jobs/hatedetection/evaluate.job.yml
          workspaceName: $(WORKSPACENAME)
          resourceGroup: $(RESOURCEGROUPNAME)
          noWait: false
      - template: templates/aml-job-metric-assert/step.yaml
        parameters:
          azureServiceConnectionName: $(SERVICECONNECTION)
          stepDisplayName: Verifying evaluation
          jobName: $(jobRun.jobName)
          metric: test
          expecting: true
          dataType: boolean
          workspaceName: $(WORKSPACENAME)
          resourceGroup: $(RESOURCEGROUPNAME)
          workspaceConfig: workspaces//$(env)//workspace.json
          failureMessage: Unable to conclude if challenger is better than champion.
      - template: templates/aml-model-compare/step.yaml
        parameters:
          azureServiceConnectionName: $(SERVICECONNECTION)
          modelName: ${{ variables.modelName }}
          champion: current
          challenger: latest
          endpoint: endpoints/${{ variables.modelName }}/endpoint.yml
          compareBy: eval_recall
          workspaceName: $(WORKSPACENAME)
          resourceGroup: $(RESOURCEGROUPNAME)
          workspaceConfig: workspaces//$(env)//workspace.json

- stage: aml_model_deployment
  displayName: Model - Deployment
  dependsOn: aml_model_evaluate
  condition: and(eq(dependencies.aml_model_evaluate.outputs['evaluate.jobMetricAssert.result'], 'true'), eq(dependencies.aml_model_evaluate.outputs['evaluate.compare.result'], 'true'))
  jobs:
  - deployment: model_deployment
    displayName: Model deployment
    environment: amlworkspace_$(env)
    strategy: 
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: templates/aml-cli-install/step.yaml
              parameters:
                componentSupport: false
                minVersion: 2.0

            - template: templates/aml-endpoint-deploy/step.yaml
              parameters:
                azureServiceConnectionName: $(SERVICECONNECTION)
                endpointFile: endpoints/*/endpoint.yml
                deploymentFile: deployments/*.yml
                workspaceName: $(WORKSPACENAME)
                resourceGroup: $(RESOURCEGROUPNAME)
                secretsToKeyVault: true
                keyVaultName: $(KEYVAULTNAME)

            - template: templates/aml-model-set/step.yaml
              parameters:
                azureServiceConnectionName: $(SERVICECONNECTION)
                modelName: ${{ variables.modelName }}
                modelVersion: $(deployment.deployedVersion)
                property: stage
                value: production
                exclusive: true
                replaceExistingWith: surpassed
                workspaceName: $(WORKSPACENAME)
                resourceGroup: $(RESOURCEGROUPNAME)

            - template: templates/aml-model-set/step.yaml
              parameters:
                azureServiceConnectionName: $(SERVICECONNECTION)
                modelName: ${{ variables.modelName }}
                modelVersion: $(deployment.deployedVersion)
                property: inference
                value: $(Build.SourceVersion)
                workspaceName: $(WORKSPACENAME)
                resourceGroup: $(RESOURCEGROUPNAME)

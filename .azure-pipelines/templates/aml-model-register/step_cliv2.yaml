parameters:
- name: azureServiceConnectionName
  type: string
- name: name
  type: string
- name: description
  type: string
  default: 
- name: fromJob
  type: boolean
  default: false
- name: jobName
  type: string
  default: .
- name: modelPath
  type: string
- name: modelVersion
  type: string
  default: 
- name: workspaceName
  type: string
  default: 
- name: resourceGroup
  type: string
  default:
- name: workspaceConfig
  type: string
  default: 

steps:
  - task: AzureCLI@2
    displayName: Registering model
    inputs:
      scriptType: bash
      scriptLocation: inlineScript
      azureSubscription: ${{ parameters.azureServiceConnectionName }}
      inlineScript: |
        if ${{ lower(parameters.fromJob) }}; then
          echo "##[debug]Downloading assets from job ${{ parameters.jobName }}"
          az ml job download --name ${{ parameters.jobName }} --resource-group ${{ parameters.resourceGroup }} --workspace-name ${{ parameters.workspaceName }}
          echo "##[debug]$(ls)"
        fi

        if test -f "${{ parameters.jobName }}/${{ parameters.modelPath }}"; then
          if [[ '${{ parameters.modelVersion }}' == '' ]]; then
            echo "##[debug]Checking if model ${{ parameters.name }} exists"

            if [[ $(az ml model list --name ${{ parameters.name }} --workspace-name ${{ parameters.workspaceName }} --resource-group ${{ parameters.resourceGroup }}) ]]; then
              echo "##[debug]Model ${{ parameters.name }} already in target workspace. Retrieving details."
              VERSION=$(az ml model list --name ${{ parameters.name }} --resource-group ${{ parameters.resourceGroup }} --workspace-name ${{ parameters.workspaceName }} | jq -r ".[0].version")
              VERSION=$((VERSION+1))
            else
              VERSION=1
            fi
          else
            VERSION=${{ parameters.modelVersion }}        
          fi
          echo "##[debug]Version of model identified as $VERSION. Creating"
          az ml model create --name ${{ parameters.name }} --version $VERSION --local-path "${{ parameters.jobName }}/${{ parameters.modelPath }}" --resource-group ${{ parameters.resourceGroup }} --workspace-name ${{ parameters.workspaceName }}
        else
          echo "##vso[task.logissue type=error]File ${{ parameters.modelPath }} not found."
          exit 1
        fi
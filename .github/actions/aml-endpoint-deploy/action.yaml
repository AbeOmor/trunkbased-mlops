name: Deploying endpoint
description: 'Deploys a model endpoint in Azure Machine Learning Services all along with all the deployments it contains. Logs are collected and uploaded.'

inputs:
  endpointFile:
    description: 'Path to the endpoint YAML file. Wildcard paths are supported which means that all matched endpoints will be deployed.'
    required: true
  deploymentFile:
    description: 'Path to the deployment YAML files for the given endpoints. This path is relative to the path where the endpoints are located.'
    required: true
  modelVersion:
    description: 'Model version you want to deploy. If this specified, it will overwrite the version indicated in the deployment file. Otherwise, the one indicated there will be used.'
    required: false
    default: ''
  workspaceName:
    description: 'Name of the workspace to work against.'
    required: true
  resourceGroup:
    description: 'Name of the resource group where the workspace is placed.'
    required: true
  noWait:
    description: 'Indicates if the action should not wait for the deployment to finish.'
    required: false
    default: 'false'
  args:
    description: 'Extra arguments'
    required: false
    default: ''
  secretsToKeyVault:
    description: 'Indicates if the `scoring url` and the `scoring key` should be uploaded to Azure Key Vault. Secrets naming convention is `<ENDPOINT_NAME>_scoringUrl` and `<ENDPOINT_NAME>_scoringKey`.'
    required: false
    default: 'false'
  keyVaultName:
    description: 'The name of the key vault to use. Required if `secretsToKeyVault` is `true`.'
    required: false
    default: ''

outputs:
  deployedVersion:
    description: 'Deployed version of the model'
    value: ${{ steps.deployment.outputs.deployedVersion }}

runs:
  using: "composite"
  steps:
    - name: Deploying endpoint
      id: deployment
      shell: bash
      run: |
        set -e
        . deploy.sh ${{ inputs.endpointFile }} ${{ inputs.deploymentFile }} ${{ inputs.workspaceName }} ${{ inputs.resourceGroup }} ${{ inputs.noWait }} ${{ inputs.secretsToKeyVault }} ${{ inputs.keyVaultName }} ${{ inputs.args }}
    
    - name: Collecting deployment logs
      id: collect_logs
      shell: bash
      if: ${{ (failure() || success()) && inputs.noWait == 'false' }}
      run: |
        echo "::debug::Collecting deployment logs"
        
        ENDPOINT_FILES=$(find ${{ inputs.endpointFile }})
        for ENDPOINT_FILE in $ENDPOINT_FILES
        do
          ENDPOINT_NAME=$(yq -r ".name" $ENDPOINT_FILE)
          
          for DEPLOYMENT_FILE in $DEPLOYMENT_FILES
          do
            echo "::debug::Working on deployment file $DEPLOYMENT_FILE"
            DEPLOYMENT_NAME=$(yq -r ".name" $DEPLOYMENT_FILE)
            
            az ml online-deployment get-logs --name $DEPLOYMENT_NAME --endpoint-name $ENDPOINT_NAME >> ./logs/$ENDPOINT_NAME.log
          done
        done

    - name: Uploading deployment logs
      uses: actions/upload-artifact@v2
      if: ${{ success() && inputs.noWait == 'false' }}
      with:
        name: deployment-logs
        path: logs/*

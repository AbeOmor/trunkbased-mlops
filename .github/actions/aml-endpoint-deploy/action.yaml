name: Deploying endpoint
description: 'Deploys a model endpoint in Azure Machine Learning Services all along with all the deployments it contains. Logs are collected and uploaded.'

inputs:
  endpointFile:
    description: 'Path to the endpoint YAML file. Wildcard paths are supported which means that all matched endpoints will be deployed.'
    required: true
  deploymentFile:
    description: 'Path to the deployment YAML files for the given endpoints. This path is relative to the path where the endpoints are located.'
    required: true
  modelVersion:
    description: 'Model version you want to deploy. If this specified, it will overwrite the version indicated in the deployment file. Otherwise, the one indicated there will be used.'
    required: false
    default: ''
  workspaceName:
    description: 'Name of the workspace to work against.'
    required: true
  resourceGroup:
    description: 'Name of the resource group where the workspace is placed.'
    required: true
  noWait:
    description: 'Indicates if the action should not wait for the deployment to finish.'
    required: false
    default: 'false'
  secretsToKeyVault:
    description: 'Indicates if the `scoring url` and the `scoring key` should be uploaded to Azure Key Vault. Secrets naming convention is `<ENDPOINT_NAME>_scoringUrl` and `<ENDPOINT_NAME>_scoringKey`.'
    required: false
    default: 'false'
  keyVaultName:
    description: 'The name of the key vault to use. Required if `secretsToKeyVault` is `true`.'
    required: false
    default: ''

outputs:
  deployedVersion:
    description: 'Deployed version of the model'
    value: ${{ steps.deployment.outputs.deployedVersion }}

runs:
  using: "composite"
  steps:
    - name: Deploying endpoint
      id: deployment
      shell: bash
      run: |
        set -e #Fail on errors
        az configure --defaults workspace=$(WORKSPACENAME) group=$(RESOURCEGROUPNAME)

        ENDPOINT_FILES=$(find ${{ inputs.endpointFile }})
        for ENDPOINT_FILE in $ENDPOINT_FILES
        do
          ENDPOINT_FOLDER=$(dirname $ENDPOINT_FILE)
          ENDPOINT_NAME=$(yq -r ".name" $ENDPOINT_FILE)

          echo "::debug::Creating endpoint with name: $ENDPOINT_NAME"
          az ml online-endpoint create -f $ENDPOINT_FILE

          echo "::debug::Retrieving URL and credentials"
          SCORING_URI=$(az ml online-endpoint show -n $ENDPOINT_NAME | jq -r ".scoring_uri")
          SCORING_KEY=$(az ml online-endpoint get-credentials -n $ENDPOINT_NAME -o tsv --query primaryKey)
            
          echo "::debug::Looking for deployments in folder $ENDPOINT_FOLDER/${{ inputs.deploymentFile }}"
          DEPLOYMENT_FILES=$(find $ENDPOINT_FOLDER/${{ inputs.deploymentFile }})
            
          for DEPLOYMENT_FILE in $DEPLOYMENT_FILES
          do
            echo "::debug::Working on deployment file $DEPLOYMENT_FILE"
            DEPLOYMENT_NAME=$(yq -r ".name" $DEPLOYMENT_FILE)
            DEPLOYMENT_MODEL=$(yq -r ".model" $DEPLOYMENT_FILE | cut -d: -f2)
            DEPLOYMENT_MODEL_VERSION=$(yq -r ".model" $DEPLOYMENT_FILE | cut -d: -f3)

            # User can overwrite the version in the YAML 
            if [[ "${{ inputs.modelVersion }}" == "" ]]; then
              TARGET_MODEL_VERSION=$DEPLOYMENT_MODEL_VERSION
            else
              echo "::debug::Model being targeted is being overwriten with version ${{ inputs.modelVersion }}"
              TARGET_MODEL_VERSION=${{ inputs.modelVersion }}
            fi
            
            echo "::debug::Working on deployment with name: $ENDPOINT_NAME/$DEPLOYMENT_NAME"

            if [[ "$TARGET_MODEL_VERSION" == "current" ]]; then
              echo "::debug::Identifying current version of the model at deployment $ENDPOINT_NAME/$DEPLOYMENT_NAME"
              MODEL_CURRENT_URL=$(az ml online-deployment show --name $DEPLOYMENT_NAME --endpoint-name $ENDPOINT_NAME -g ${{ inputs.resourceGroup }} -w ${{ inputs.workspaceName }} | jq -r ".model")
              MODEL_CURRENT=$(basename $MODEL_CURRENT_URL)

              echo "::debug::Updating yaml files with current model version: $MODEL_CURRENT"
              sed -i 's/:'$DEPLOYMENT_MODEL_VERSION'/:'$MODEL_CURRENT'/' $DEPLOYMENT_FILE
            fi

            if [[ "$TARGET_MODEL_VERSION" == "latest" ]]; then
              echo "::debug::Identifying latest version of the model $DEPLOYMENT_MODEL"
              MODEL_LATEST=$(az ml model list --name $DEPLOYMENT_MODEL -g ${{ inputs.resourceGroup }} -w ${{ inputs.workspaceName }} | jq -r '.[0].version')
              
              echo "::debug::Updating yaml files with latest model version: $MODEL_LATEST"
              sed -i 's/:'$DEPLOYMENT_MODEL_VERSION'/:'$MODEL_LATEST'/' $DEPLOYMENT_FILE 
            fi
        
            echo "::debug::Creating deployment with name: $ENDPOINT_NAME/$DEPLOYMENT_NAME"
            if ${{ inputs.noWait }}; then
              az ml online-deployment create -f $DEPLOYMENT_FILE --only-show-errors --no-wait
            else
              az ml online-deployment create -f $DEPLOYMENT_FILE --only-show-errors

              echo "::debug::Configuring traffic for $ENDPOINT_NAME/$DEPLOYMENT_NAME"
              TRAFFIC=$(yq --arg ENDPOINT_NAME $ENDPOINT_NAME '.traffic | select(has($ENDPOINT_NAME)) | .[] ')
              if [[ $TRAFFIC != ""]]; then
                echo "::debug::Configuring traffic for $ENDPOINT_NAME/$DEPLOYMENT_NAME with value $TRAFFIC"
                az ml online-endpoint update -n $ENDPOINT_NAME --traffic "$DEPLOYMENT_NAME=$TRAFFIC"
              else
                echo "::warning file=$ENDPOINT_FILE::Traffic is not indicated for $ENDPOINT_NAME/$DEPLOYMENT_NAME. It will be zero."
              fi
  
              echo "::debug::Adquiring logs for deployment with name: $ENDPOINT_NAME/$DEPLOYMENT_NAME"
              mkdir -p logs
              az ml online-deployment get-logs --name $DEPLOYMENT_NAME --endpoint-name $ENDPOINT_NAME >> logs/$ENDPOINT_NAME_$DEPLOYMENT_NAME.log
            fi
        
            echo "::debug::Deployment completed"
          done
        
          if ${{ inputs.secretsToKeyVault }}; then
            echo "::debug::Uploading secrets to key vault ${{ inputs.keyVaultName }}"
            az keyvault secret set --vault-name ${{ inputs.keyVaultName }} --name ${ENDPOINT_NAME//-/}ScoringUrl --value $SCORING_URI
            az keyvault secret set --vault-name ${{ inputs.keyVaultName }} --name ${ENDPOINT_NAME//-/}ScoringKey --value $SCORING_KEY
          fi

          echo "::debug::Getting deployed version for model at file $DEPLOYMENT_FILE"
          DEPLOYED_VERSION=$(yq -r ".model" $DEPLOYMENT_FILE | cut -d: -f3)
          echo "::set-output name=deployedVersion::$DEPLOYED_VERSION"
          echo "::debug::Deployed version is: $DEPLOYED_VERSION"

          echo "::debug::Endpoint evaluation completed"
        done

    - name: Uploading deployment logs
      uses: actions/upload-artifact@v2
      if: ${{ (failure() || success()) && '${{ inputs.noWait }}' == 'false' }}
      with:
        name: deployment-logs
        path: logs/*

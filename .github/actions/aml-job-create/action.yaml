name: Submitting job
description: 'Creates and submit a new job to Azure ML based on a job configuration. Jobs are named using the provided job name and a unique run id returned by GitHub.'

inputs:
  name:
    description: 'Name of the job to be created. Note that the final name of the job will be the given name followed by the number of the build run `github.run_id`. Thhis value is provided as an output.'
    required: true
  jobFile:
    description: 'Path to the job file.'
    required: true
  workspaceName:
    description: 'Name of the workspace to work against.'
    required: true
  resourceGroup:
    description: 'Name of the resource group where the workspace is placed.'
    required: true
  noWait:
    description: 'Indicates if the action should not wait for the job to finish.'
    required: false
    default: 'false'

outputs:
  jobName:
    description: Name of the job name created in the workspace.
    value: ${{ steps.jobRun.outputs.jobName }}

runs:
  using: "composite"
  steps:
    - name: Deploying endpoint
      id: jobRun
      shell: bash
      run: |
        JOB_NAME="${{ inputs.name }}-${{ github.run_id }}"
        echo "::debug::Creating job with name: $JOB_NAME" 
        echo "::set-output name=jobName::$JOB_NAME"

        if ${{ inputs.noWait }}; then
          az ml job create -n $JOB_NAME -f ${{ inputs.jobFile }} --resource-group ${{ inputs.resourceGroup }} --workspace-name ${{ inputs.workspaceName }}
        else
          az ml job create -n $JOB_NAME -f ${{ inputs.jobFile }} --resource-group ${{ inputs.resourceGroup }} --workspace-name ${{ inputs.workspaceName }} --stream >> ${{ inputs.name}}.log
        fi

    - name: Uploading job logs
      uses: actions/upload-artifact@v2
      if: ${{ (failure() || success()) && '${{ inputs.noWait }}' == 'false' }}
      with:
        name: ${{ inputs.name }}-log
        path: ${{ inputs.name }}.log
